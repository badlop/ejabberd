name: CI

on:
  push:
    paths-ignore:
    - '.devcontainer/**'
    - 'examples/**'
    - 'lib/**'
    - 'man/**'
    - 'priv/**'
    - '**.md'
  pull_request:
    paths-ignore:
    - '.devcontainer/**'
    - 'examples/**'
    - 'lib/**'
    - 'man/**'
    - 'priv/**'
    - '**.md'

jobs:

  tests:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        otp: ['24']
        include:
        - otp: '24'
          rebar: 3
          os: ubuntu-20.04
    runs-on: ${{ matrix.os }}
    services:
      redis:
        image: redis
        ports:
        - 6379:6379

    steps:

    - uses: actions/checkout@v2

    - name: Get previous Erlang/OTP
      uses: ErlGang/setup-erlang@master
      if: matrix.otp != 24
      with:
        otp-version: ${{ matrix.otp }}

    - name: Prepare databases
      run: |
        sudo sed -i 's|#password_encryption.*|password_encryption = md5|g' /etc/postgresql/14/main/postgresql.conf
        sudo sed -i 's|scram-sha-256|md5|g' /etc/postgresql/14/main/pg_hba.conf
        sudo systemctl start mysql.service
        sudo systemctl start postgresql.service
        mysql -u root -proot -e "CREATE USER 'ejabberd_test'@'localhost'
                                 IDENTIFIED BY 'ejabberd_test';"
        mysql -u root -proot -e "CREATE DATABASE ejabberd_test;"
        mysql -u root -proot -e "GRANT ALL ON ejabberd_test.*
                                 TO 'ejabberd_test'@'localhost';"
        mysql -u root -proot ejabberd_test < sql/mysql.sql
        pg_isready
        sudo -u postgres psql -c "CREATE USER ejabberd_test
                                  WITH PASSWORD 'ejabberd_test';"
        sudo -u postgres psql -c "CREATE DATABASE ejabberd_test;"
        sudo -u postgres psql ejabberd_test -f sql/pg.sql
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES
                                  ON DATABASE ejabberd_test TO ejabberd_test;"
        sudo -u postgres psql ejabberd_test -c "GRANT ALL PRIVILEGES ON ALL
                                                TABLES IN SCHEMA public
                                                TO ejabberd_test;"
        sudo -u postgres psql ejabberd_test -c "GRANT ALL PRIVILEGES ON ALL
                                                SEQUENCES IN SCHEMA public
                                                TO ejabberd_test;"

    - name: Prepare libraries
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install libexpat1-dev libgd-dev libpam0g-dev \
                                 libsqlite3-dev libwebp-dev libyaml-dev

    - name: Cache rebar2
      if: matrix.rebar == 2
      uses: actions/cache@v2
      with:
        path: |
          deps/
          dialyzer/
          ebin/
        key: ${{matrix.otp}}-${{matrix.rebar}}-${{hashFiles('rebar.config')}}

    - name: Cache rebar3
      if: matrix.rebar == 3
      uses: actions/cache@v2
      with:
        path: ~/.cache/rebar3/
        key: ${{matrix.otp}}-${{matrix.rebar}}-${{hashFiles('rebar.config')}}

    - name: Prepare rebar
      id: rebar
      run: |
        echo '{xref_ignores, [{eldap_filter_yecc, return_error, 2}
                             ]}.' >>rebar.config
        echo '{xref_checks, [deprecated_function_calls, deprecated_functions,
              locals_not_used, undefined_function_calls, undefined_functions]}.
              % Disabled: exports_not_used,' >>rebar.config
        echo '{dialyzer, [{get_warnings, true}, {plt_extra_apps, [cache_tab,
              eimp, epam, esip, ezlib, fast_tls, fast_xml, fast_yaml,
              mqtree, p1_acme, p1_mysql, p1_oauth2, p1_pgsql, p1_utils, pkix,
              sqlite3, stringprep, stun, xmpp, yconf]} ]}.' >>rebar.config
        LABEL=`git show -s --format=%s | cut -c 1-30`
        echo "{ct_opts, [{verbosity, 20}, {keep_logs, 20}, {label, \"$LABEL...\"}]}." >>rebar.config

    - name: Download previous test logs
      if: matrix.otp == 24
      continue-on-error: true
      run: |
        mkdir -p _build/test
        curl -sSL https://github.com/badlop/ejtestlogs/tarball/gh-pages |
          tar -C _build/test --strip-components=1 --wildcards -xzf -

    - name: Compile
      run: |
        ./autogen.sh
        [[ ${{ matrix.rebar }} = 2 ]] && REBAR=rebar || REBAR=`which rebar3`
        ./configure --with-rebar=$REBAR \
                    --prefix=/tmp/ejabberd \
                    --enable-all \
                    --disable-elixir \
                    --disable-odbc
        make update
        make

    - run: make rel
    - run: make install -s
    - run: make hooks
    - run: make options
    - run: make xref
    - run: make dialyzer

    - name: Run tests with rebar2
      if: matrix.otp != 24
      run: |
        make test
    - name: Run tests with rebar3
      if: matrix.otp == 24
      run: |
        (cd priv && ln -sf ../sql)
        COMMIT=`echo $GITHUB_SHA | cut -c 1-7`
        # Full author name: ${{ github.event.head_commit.author.name }}
        NODENAME=$GITHUB_RUN_NUMBER@${{ github.actor }}#$GITHUB_REF_NAME#$COMMIT
        CT_BACKENDS=mnesia rebar3 ct --name $NODENAME
        rebar3 cover

    - run: ls -la _build
    - run: ls -la _build/test
    - run: ls -la _build/test/logs
    - run: ls -la _build/test/logs/last

    - name: Check results
      if: always()
      run: |
        [[ -d _build ]] && ln -s _build/test/logs/last/ logs \
                        && ln `find _build/ -name "*dialyzer_warnings"` \
                              logs/dialyzer.log \
                        || ln dialyzer/error.log logs/dialyzer.log

    - run: ls -la logs
    - run: ls -la logs/
    - run: find logs/ -name suite.log

    - name: Check results
      if: always()
      run: |
        ln `find logs/ -name suite.log` logs/suite.log

    - name: Check results
      if: always()
      run: |
        grep 'TEST COMPLETE' logs/suite.log
        grep -q 'TEST COMPLETE,.* 0 failed' logs/suite.log
        test $(find logs/ -empty -name error.log)

    - name: View dialyzer report
      run: cat logs/dialyzer.log

    - name: View full suite.log
      run: cat logs/suite.log

    - name: View suite.log failures
      if: failure()
      run: cat logs/suite.log | awk
           'BEGIN{RS="\n=case";FS="\n"} /=result\s*failed/ {print "=case" $0}'

    - name: View full ejabberd.log
      if: failure()
      run: find logs/ -name ejabberd.log -exec cat '{}' ';'

    - name: View error.log
      if: failure()
      run: find logs/ -name error.log -exec cat '{}' ';'

    - name: View exunit.log
      if: failure()
      run: find logs/ -name exunit.log -exec cat '{}' ';'

    - name: Send to coveralls
      if: matrix.otp == 24
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        DIAGNOSTIC=1 rebar3 as test coveralls send
        curl -v -k https://coveralls.io/webhook \
             --header "Content-Type: application/json" \
             --data '{"repo_name":"$GITHUB_REPOSITORY",
                      "repo_token":"$GITHUB_TOKEN",
                      "payload":{"build_num":$GITHUB_RUN_ID,
                                 "status":"done"}}'

    - name: Upload test logs to GitHub Pages
      if: always() && (matrix.otp == 24)
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_dir: _build/test
        exclude_assets: '.github,lib,plugins'
        external_repository: badlop/ejtestlogs
        deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

    - name: View links to Github Pages
      if: always() && (matrix.otp == 24)
      run: |
        CTRUN=`ls -la _build/test/logs/last | sed 's|.*-> ||'`
        echo "This run: https://badlop.github.io/ejtestlogs/logs/$CTRUN/"
        echo "All runs: https://badlop.github.io/ejtestlogs/logs/all_runs.html"
        echo "Cover report: https://badlop.github.io/ejtestlogs/cover/"
